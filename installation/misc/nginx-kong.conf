server_tokens off;

error_log logs/error.log notice;

lua_package_path       './?.lua;./?/init.lua;;;;';
lua_package_cpath      ';;;';
lua_socket_pool_size   30;
lua_socket_log_errors  off;
lua_max_running_timers 4096;
lua_max_pending_timers 16384;
lua_ssl_verify_depth   1;
lua_ssl_trusted_certificate '/usr/local/kong/.ca_combined';

lua_shared_dict kong                        5m;
lua_shared_dict kong_locks                  8m;
lua_shared_dict kong_healthchecks           5m;
lua_shared_dict kong_process_events         5m;
lua_shared_dict kong_cluster_events         5m;
lua_shared_dict kong_rate_limiting_counters 12m;
lua_shared_dict kong_core_db_cache          128m;
lua_shared_dict kong_core_db_cache_miss     12m;
lua_shared_dict kong_db_cache               128m;
lua_shared_dict kong_db_cache_miss          12m;

lua_shared_dict kong_vitals_counters 50m;
lua_shared_dict kong_vitals_lists   1m;
lua_shared_dict kong_vitals 1m;
lua_shared_dict kong_counters   1m;
lua_shared_dict kong_reports_consumers       10m;
lua_shared_dict kong_reports_routes          1m;
lua_shared_dict kong_reports_services        1m;
lua_shared_dict kong_reports_workspaces 1m;
lua_shared_dict kong_keyring 5m;
lua_shared_dict kong_profiling_state 1536k;  # 1.5 MBytes

underscores_in_headers on;
ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

# injected nginx_http_* directives
charset UTF-8;
client_body_buffer_size 8k;
client_max_body_size 0;
lua_regex_cache_max_entries 8192;
lua_regex_match_limit 100000;
lua_shared_dict prometheus_metrics 5m;
lua_ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
ssl_dhparam /usr/local/kong/ssl/ffdhe2048.pem;
ssl_prefer_server_ciphers off;
ssl_protocols TLSv1.2 TLSv1.3;
ssl_session_tickets on;
ssl_session_timeout 1d;

init_by_lua_block {
    Kong = require 'kong'
    Kong.init()
}

init_worker_by_lua_block {
    Kong.init_worker()
}

exit_worker_by_lua_block {
    Kong.exit_worker()
}


server {
    server_name kong_gui;
    listen 0.0.0.0:8002;
    listen 0.0.0.0:8445 ssl http2;

    ssl_certificate     /srv/shared/ssl/server.crt;
    ssl_certificate_key /srv/shared/ssl/server.key;
    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;

    client_max_body_size 10m;
    client_body_buffer_size 10m;

    types {
        text/html                             html htm shtml;
        text/css                              css;
        text/xml                              xml;
        image/gif                             gif;
        image/jpeg                            jpeg jpg;
        application/javascript                js;
        application/json                      json;
        image/png                             png;
        image/tiff                            tif tiff;
        image/x-icon                          ico;
        image/x-jng                           jng;
        image/x-ms-bmp                        bmp;
        image/svg+xml                         svg svgz;
        image/webp                            webp;
    }

    access_log /srv/shared/logs/admingui_access.log;
    error_log /srv/shared/logs/admingui_error.log;

    gzip on;
    gzip_types text/plain text/css application/json application/javascript;

    include nginx-kong-gui-include.conf;
}


server {
    server_name kong_portal_gui;
    listen 0.0.0.0:8003;
    listen 0.0.0.0:8446 ssl http2;

    access_log /srv/shared/logs/portalgui_access.log;
    error_log /srv/shared/logs/portalgui_error.log notice;

    ssl_certificate     /srv/shared/ssl/server.crt;
    ssl_certificate_key /srv/shared/ssl/server.key;
    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;

    client_max_body_size 10m;
    client_body_buffer_size 10m;
    log_not_found off;

    types {
      text/html                             html htm shtml;
      text/css                              css;
      text/xml                              xml;
      image/gif                             gif;
      image/jpeg                            jpeg jpg;
      application/javascript                js;
      application/json                      json;
      image/png                             png;
      image/tiff                            tif tiff;
      image/x-icon                          ico;
      image/x-jng                           jng;
      image/x-ms-bmp                        bmp;
      image/svg+xml                         svg svgz;
      image/webp                            webp;
    }

    gzip on;
    gzip_types text/plain text/css application/json application/javascript;

    location ^~ /__legacy {
        root portal;

        header_filter_by_lua_block {
            ngx.header["server"] = nil
        }

        expires 90d;
        add_header Cache-Control 'public';
       #add_header X-Frame-Options 'sameorigin';
        add_header X-XSS-Protection '1; mode=block';
        add_header X-Content-Type-Options 'nosniff';
        etag off;
    }

    location ~* \.(jpg|jpeg|png|gif|ico|css|ttf|js)$ {
        root portal;

        header_filter_by_lua_block {
            ngx.header["server"] = nil
        }

        content_by_lua_block {
            Kong.serve_portal_gui({
                acah = "Content-Type",
            })
        }

        expires 90d;
        add_header Cache-Control 'public';
       #add_header X-Frame-Options 'sameorigin';
        add_header X-XSS-Protection '1; mode=block';
        add_header X-Content-Type-Options 'nosniff';
        etag off;
    }


    location / {
        root portal;
        default_type text/html;

        header_filter_by_lua_block {
            ngx.header["server"] = nil
        }

        content_by_lua_block {
            Kong.serve_portal_gui({
                acah = "Content-Type",
            })
        }

        add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
        add_header Access-Control-Allow-Headers 'Content-Type';
        add_header Access-Control-Allow-Origin '*';
        etag off;
    }

    location /robots.txt {
        header_filter_by_lua_block {
            ngx.header["server"] = nil
        }

        return 200 'User-agent: *\nDisallow: /';
    }
}


server {
    server_name portal_api;
    listen 0.0.0.0:8004;
    listen 0.0.0.0:8447 ssl http2;

    access_log /srv/shared/logs/portalapi_access.log;
    error_log /srv/shared/logs/portalapi_error.log notice;

    client_max_body_size 10m;
    client_body_buffer_size 10m;

    ssl_certificate     /srv/shared/ssl/server.crt;
    ssl_certificate_key /srv/shared/ssl/server.key;
    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;

    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

    location / {
        default_type application/json;
        content_by_lua_block {
            Kong.serve_portal_api({
                acah = "Content-Type",
            })
        }
    }

    location /robots.txt {
        return 200 'User-agent: *\nDisallow: /';
    }
}

server {
    charset UTF-8;
    server_name kong_admin;
    listen 0.0.0.0:8001;
    listen 0.0.0.0:8444 ssl http2;

    access_log /srv/shared/logs/admin_access.log;
    error_log  /srv/shared/logs/admin_error.log notice;

    real_ip_header     X-Real-IP;
    real_ip_recursive  off;

    ssl_certificate     /srv/shared/ssl/server.crt;
    ssl_certificate_key /srv/shared/ssl/server.key;
    ssl_session_cache   shared:AdminSSL:10m;

    # injected nginx_admin_* directives
    client_body_buffer_size 10m;
    client_max_body_size 10m;

    location / {
        default_type application/json;
        content_by_lua_block {
            Kong.admin_content({
                acah = "Content-Type, Kong-Admin-Token, Kong-Request-Type, Cache-Control",
            })
        }

        log_by_lua_block {
            local audit_log = require "kong.enterprise_edition.audit_log"
            audit_log.admin_log_handler()
            require("kong.tracing").flush()
        }
        header_filter_by_lua_block {
            Kong.admin_header_filter()
        }
    }

    location /robots.txt {
        return 200 'User-agent: *\nDisallow: /';
    }
}

server {
    charset UTF-8;
    server_name kong_status;
    listen 0.0.0.0:8100;

    access_log /srv/shared/logs/status_access.log;
    error_log  /srv/shared/logs/status_error.log notice;


    # injected nginx_status_* directives

    location / {
        default_type application/json;
        content_by_lua_block {
            Kong.status_content()
        }
        header_filter_by_lua_block {
            Kong.status_header_filter()
        }
    }

    location /robots.txt {
        return 200 'User-agent: *\nDisallow: /';
    }
}


server {
    charset UTF-8;
    server_name kong_cluster_listener;
    listen 0.0.0.0:8005 ssl;

    access_log /srv/shared/logs/admin_access.log;
    error_log  /srv/shared/logs/admin_error.log notice;

    ssl_verify_client   optional_no_ca;
    ssl_certificate     /srv/shared/ssl/cluster.crt;
    ssl_certificate_key /srv/shared/ssl/cluster.key;
    ssl_session_cache   shared:ClusterSSL:10m;

    location = /v1/outlet {
        content_by_lua_block {
            Kong.serve_cluster_listener()
        }
    }
}

server {
    server_name kong_cluster_telemetry_listener;
    listen 0.0.0.0:8006 ssl;

    access_log off;

    ssl_verify_client   optional_no_ca;
    ssl_certificate     /srv/shared/ssl/cluster.crt;
    ssl_certificate_key /srv/shared/ssl/cluster.key;
    ssl_session_cache   shared:ClusterSSL:10m;

    location = /v1/ingest {
        content_by_lua_block {
            Kong.serve_cluster_telemetry_listener()
        }
    }
}

server {
    charset UTF-8;
    server_name kong_worker_events;
    listen unix:/usr/local/kong/worker_events.sock;
    access_log off;
    location / {
        content_by_lua_block {
          require("resty.events.compat").run()
        }
    }
}
